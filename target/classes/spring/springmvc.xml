<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
    
    <!-- 一个配置节解决映射器和适配器的配置注解配置 --> 
    <!-- 默认配置json转换器 -->
      <!-- 注入转换器conversionService和校验器validator -->
    <mvc:annotation-driven 
       conversion-service="conversionService"
       validator="validator" /> 	
	
	<!-- 对静态资源文件的访问 不支持访问WEB-INF目录 -->  
    <mvc:default-servlet-handler /> 
    <!-- 静态资源解析，包括js,css,img... -->
	<mvc:resources location="/WEB-INF/static/" mapping="/static/**"></mvc:resources>

	<!-- 也不用配置具体的Controller了，直接使用这个进行扫描包即可，也可以扫描service -->
	<context:component-scan base-package="ssm.controller"></context:component-scan>
	
	<!-- 配置视图解析器 
		进行jsp解析，默认使用jstl标签，classpath下得有jstl的包
	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" />
	
	<!-- 配置转换器 -->
	<!-- 自定义参数绑定 -->
	<bean id="conversionService" 
	   class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	   <!-- 转换器 -->
	   <property name="converters">
	   		<list>
	   		    <!-- String转换为Date(yyyy-MM-dd HH:mm:ss) -->
	   			<bean class="ssm.converter.StringToDate"/>
	   		</list>
	   </property>
	   </bean>
	<!-- 配置校验器 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
	    <!-- 校验器，使用hibernate校验器 -->
	    <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
	    <!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下面的ValidationMessages.properties文件 -->
	    <property name="validationMessageSource" ref="messageSource"/>
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	    <!-- 资源文件名 -->
	    <property name="basenames">
	        <list>
	            <value>classpath:CustomValidationMessage</value>
	        </list>
	    </property>
	    <!-- 资源文件编码格式 -->
	    <property name="fileEncodings" value="utf-8"/>
	    <!-- 对资源文件内容缓存时间，单位秒 -->
	    <property name="cacheSeconds" value="120"/>
	</bean>
	
	<!-- springmvc提供的简单异常处理器 -->
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	     定义默认的异常处理页面
	    <property name="defaultErrorView" value="/WEB-INF/jsp/error.jsp"/>
	    定义异常处理页面用来获取异常信息的变量名，也可不定义，默认名为exception 
	    <property name="exceptionAttribute" value="ex"/>
	    定义需要特殊处理的异常，这是重要点 
	    <property name="exceptionMappings">
	        <props>
	            <prop key="ssm.exception.CustomException">/WEB-INF/jsp/custom_error.jsp</prop>
	        </props>
	        还可以定义其他的自定义异常
	    </property>
	</bean> -->
	<!-- 自定义的全局异常处理器 
	只要实现HandlerExceptionResolver接口就是全局异常处理器-->
	<bean class="ssm.exception.CustomExceptionResolver"/> 
	
	<!-- 文件上传,需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <!-- 设置船上文件的最大尺寸为5MB -->
	    <property name="maxUploadSize" value="5242880"/>
	    <property name="defaultEncoding" value="utf-8"/>   
	</bean>

	<!-- 配置拦截器（是针对具体的handmapping进行配置的） -->
    <!-- <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
    <property name="interceptors">
        <list>
            <ref bean="handlerInterceptor1"/>
        </list>
    </property>
	</bean>
	<bean id="handlerInterceptor1" class="ssm.intercapter.HandlerInterceptor1"/> -->
	<!-- 配置拦截器(类似于全局的拦截器) -->
	<mvc:interceptors>
		<!-- 多个拦截器，按顺序执行 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/> <!-- 拦截所有的url包括子url路径 -->
			<bean class="ssm.interceptor.LoginInterceptor"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/> <!-- 拦截所有的url包括子url路径 -->
			<bean class="ssm.interceptor.HandlerInterceptor1"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="ssm.interceptor.HandlerInterceptor2"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="ssm.interceptor.HandlerInterceptor3"/>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>